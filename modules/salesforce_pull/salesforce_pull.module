<?php

define('SALESFORCE_PULL_QUEUE', 'salesforce_pull');

/**
 * Implements hook_menu().
 */
function salesforce_pull_menu() {
  $items['admin/config/services/salesforce/testing'] = array(
    'title' => 'Salesforce Testing Page',
    'page callback' => 'salesforce_pull_page',
    'access callback' => 'salesforce_mappings_access',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/*
 * Implements hook_cron()
 */
function salesforce_pull_cron() {
  salesforce_pull_get_updated_records();
  salesforce_pull_process_records();
  salesforce_process_deleted_records();
}

/*
 * Pull updated records and place them in the queue.
 */
function salesforce_pull_get_updated_records() {
  $sfapi = salesforce_get_api();
  $queue = DrupalQueue::get(SALESFORCE_PULL_QUEUE);

  foreach (salesforce_mapping_get_mapped_objects() as $type) {
    // Get field list from mappings
    foreach (salesforce_mapping_load_multiple(array('salesforce_object_type' => $type)) as $mapping) {
      foreach ($mapping->field_mappings as $field_map) {
        $mapped_fields[$field_map['salesforce_field']] = $field_map['salesforce_field'];
      }
    }
    $fields = 'Id,+LastModifiedDate';
    foreach ($mapped_fields as $field) {
      $fields .= ',+' . $field;
    }

    // SOQL Query
    $queryString = 'SELECT+'. $fields .'+from+' . $type;
    $sf_last_sync = variable_get('salesforce_pull_last_sync_' . $type, NULL);

    // If no lastupdate, get all records, else get records since last pull
    if ($sf_last_sync) {
      $last_sync = gmdate('Y-m-d\TH:i:s\Z', $sf_last_sync);
      $queryString .= '+where+LastModifiedDate>' . $last_sync;
    }

    $results = $sfapi->query($queryString);
    $version_url = $sfapi->rest_api_version['url'];

    if (!isset($results['errorCode'])) {
      // Handle requests larger than the batch limit (usually 2000)
      $next_records_url = isset($results['nextRecordsUrl']) ?
        str_replace($version_url, '', $results['nextRecordsUrl']) :
        FALSE;
      while($next_records_url) {
        $new_result = $sfapi->apiCall($next_records_url);
        $results['records'] = array_merge($results['records'], $new_result['records']);
        $next_records_url = isset($new_result['nextRecordsUrl']) ?
          str_replace($version_url, '', $new_result['nextRecordsUrl']) : FALSE;
      }

      // Write items to the queue
      foreach ($results['records'] as $result) {
        $queue->createItem($result);
      }

      variable_set('salesforce_pull_last_sync_' . $type, REQUEST_TIME);
    }
    else {
      watchdog('Salesforce Pull', $results['errorCode'] . ':' . $results['message'], array(), WATCHDOG_ERROR);
    }
  }
}

/*
 * Process records in the queue.
 */
function salesforce_pull_process_records() {
  $sfapi = salesforce_get_api();
  $limit = variable_get('salesforce_pull_limit', 50);

  $queue = DrupalQueue::get(SALESFORCE_PULL_QUEUE);
  for ($stop = 0; ($item = $queue->claimItem()) && $stop < $limit; $stop++) {
    // Get Salesforce object
    $sf_object = $item->data;

    // Get Mapping
    $sf_mappings = salesforce_mapping_load_multiple(
      array('salesforce_object_type' => $sf_object['attributes']['type'])
    );

    foreach ($sf_mappings as $sf_mapping) {
      // Mapping object exists?
      $mapping_object = salesforce_mapping_object_load_by_sfid($sf_object['Id']);
      if ($mapping_object && ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_UPDATE)) {
        $entity = entity_load_single($mapping_object->entity_type, $mapping_object->entity_id);
        $entity_updated = $entity->updated;
        $sf_object_updated = strtotime($sf_object['LastModifiedDate']);
        if ($sf_object_updated > $entity_updated) {
          // Field Mapping
          foreach ($sf_mapping->field_mappings as $field_map) {
            if ($field_map['direction'] == 'sync' || $field_map['direction'] == 'sf_drupal') {
              $entity->$field_map['drupal_field'] = $sf_object[$field_map['salesforce_field']];
            }
          }
          // Update entity
          entity_save($mapping_object->entity_type, $entity);
          watchdog('Salesforce Pull',
            'Updated entity %label associated with Salesforce Object ID: %sfid',
            array(
              '%label' => $entity->label(),
              '%sfid' => $sf_object['Id']
            )
          );
        }
      }
      else if ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_CREATE) {
        // Create entity from mapping object and field maps.
        $entity_info = entity_get_info($sf_mapping->drupal_entity_type);
        $values = array($entity_info['entity keys']['bundle'] => $sf_mapping->drupal_bundle);
        foreach ($sf_mapping->field_mappings as $field_map) {
          if ($field_map['direction'] == 'sync' || $field_map['direction'] == 'sf_drupal') {
            $values[$field_map['drupal_field']] = $sf_object[$field_map['salesforce_field']];
          }
        }
        // Create entity
        $entity = entity_create($sf_mapping->drupal_entity_type, $values);
        entity_save($sf_mapping->drupal_entity_type, $entity);
        // Create mapping object
        $mapping_object = entity_create('salesforce_mapping_object', array(
          'salesforce_id' => $sf_object['Id'],
          'entity_type' => $sf_mapping->drupal_entity_type,
          'entity_id' => $entity->internalIdentifier(),
        ));
        $mapping_object->save();

        watchdog('Salesforce Pull',
          'Created entity %label associated with Salesforce Object ID: %sfid',
          array(
            '%label' => $entity->label(),
            '%sfid' => $sf_object['Id']
          )
        );
      }
    }
    // Remove item from queue
    $queue->deleteItem($item);
  }

  // If we have reached the pull limit and an item is still claimed, release it
  if ($item) {
    $queue->releaseItem($item);
  }
}

/*
 * Definition goes here
 */
function salesforce_process_deleted_records() {
  $sfapi = salesforce_get_api();
  module_load_include('inc', 'salesforce_soap');
  $soap = new SalesforceSoapPartner($sfapi);

  foreach (salesforce_mapping_get_mapped_objects() as $type) {

    $last_delete_sync = variable_get('salesforce_delete_last_sync_' . $type, REQUEST_TIME);
    $now = time();
    // SOAP getDeleted() restraint: startDate must be at least one minute greater than endDate
    $now = $now > $last_delete_sync+60 ? $now : $now+60;
    $last_delete_sync_sf = gmdate('Y-m-d\TH:i:s\Z', $last_delete_sync);
    $now_sf = gmdate('Y-m-d\TH:i:s\Z', $now);
    $deleted = $soap->getDeleted($type, $last_delete_sync_sf, $now_sf);
    $sf_mappings = salesforce_mapping_load_multiple(
      array('salesforce_object_type' => $type)
    );
    if (isset($deleted->deletedRecords)) {
      foreach ($deleted->deletedRecords as $record) {
        $mapping_object = salesforce_mapping_object_load_by_sfid($record->id);
        foreach ($sf_mappings as $sf_mapping) {
          if ($mapping_object && ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_DELETE)) {
            entity_delete('salesforce_mapping_object', $mapping_object->salesforce_mapping_object_id);
            entity_delete($sf_mapping->drupal_entity_type, $mapping_object->entity_id);
            watchdog('Salesforce Pull',
              'Deleted entity %label with ID: %id associated with Salesforce Object ID: %sfid',
              array(
                '%label' => $sf_mapping->drupal_entity_type . ':' . $sf_mapping->drupal_bundle,
                '%id' => $mapping_object->entity_id,
                '%sfid' => $record->id
              )
            );
          }
        }
      }
    }
    variable_set('salesforce_delete_last_sync_' . $type, REQUEST_TIME);
  }

}

function salesforce_pull_page() {

  return '';
}
