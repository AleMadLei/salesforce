<?php

function salesforce_pull_menu() {
  $items['admin/config/services/salesforce/testing'] = array(
    'title' => 'Salesforce Testing Page',
    'page callback' => 'salesforce_pull_page',
    'access callback' => 'salesforce_mappings_access',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/*
 * Implements hook_cron()
 */
function salesforce_pull_cron() {
  salesforce_pull_get_updated_records();
  salesforce_pull_process_records();
}

/*
 * Pull updated records and place them in the queue
 */
function salesforce_pull_get_updated_records() {

  $sfapi = salesforce_get_api();

  $queue = DrupalQueue::get('sf_pull');

  foreach (salesforce_mapping_get_mapped_objects() as $type) {

    $queue->deleteQueue();

    $settings = array(
      'lastUpdate' => time(),
    );

    $queryString = 'SELECT+id,+name,+LastModifiedDate+from+' . $type;
    $sf_pull_data = variable_get('salesforce_pull_data_' . $type);

    // If no lastupdate, get all records, else get records since last pull
    if ($sf_pull_data) {
      $last_pull = gmdate('Y-m-d\TH:i:s\Z', $sf_pull_data['lastUpdate']);
      $queryString .= '+where+LastModifiedDate>' . $last_pull;
    }

    // SOQL Query
    $results = $sfapi->query($queryString);

    // Write items to the queue
    foreach ($results['records'] as $result) {
      $queue->createItem($result);
    }

    variable_set('salesforce_pull_data_' . $type, $settings);
    variable_del('salesforce_pull_data_' . $type);

  }

}

/*
 * Process records in the queue
 */
function salesforce_pull_process_records() {
  $sfapi = salesforce_get_api();
  $limit = variable_get('salesforce_pull_limit', 50);

  $queue = DrupalQueue::get('sf_pull');
  for ($stop = 0; ($item = $queue->claimItem()) && $stop < $limit; $stop++) {
    // Get object URL
    $sf_object_url = str_replace('/services/data/v25.0/', '', $item->data['attributes']['url']);
    // Get Salesforce object
    $sf_object = $sfapi->apiCall($sf_object_url);
    // Get Mapping
    $sf_mappings = salesforce_mapping_load_multiple(
      array('salesforce_object_type' => $sf_object['attributes']['type'])
    );

    foreach ($sf_mappings as $sf_mapping) {
      $sf_create = $sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_CREATE;
      $sf_update = $sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_UPDATE;
      // Mapping object exists?
      $mapping_object = salesforce_mapping_object_load_by_sfid($sf_object['Id']);
      if ($mapping_object) {
        if ($sf_update !== 0) {
          $entity = entity_load($mapping_object->entity_type, array($mapping_object->entity_id));
          $entity_updated = $entity[$mapping_object->entity_id]->updated;
          $sf_object_updated = strtotime($sf_object['LastModifiedDate']);
            if ($sf_object_updated > $entity_updated) {
            // Field Mapping
              foreach ($sf_mapping->field_mappings as $field_map) {
                $entity[$mapping_object->entity_id]->$field_map['drupal_field']
                  = $sf_object[$field_map['salesforce_field']];
              }
              entity_save($mapping_object->entity_type, $entity[$mapping_object->entity_id]);
              watchdog('Salesforce Pull',
                t('Updated entity associated with Salesforce Object ID: ') . $sf_object['Id']);
          }
        }
      }
      else {
        if ($sf_create !== 0) {
          $entity_info = entity_get_info($sf_mapping->drupal_entity_type);
          $entity = entity_create($sf_mapping->drupal_entity_type,
            array($entity_info['entity keys']['bundle'] => $sf_mapping->drupal_bundle)
          );
          // Field Mapping
          foreach ($sf_mapping->field_mappings as $field_map) {
            $entity->$field_map['drupal_field'] = $sf_object[$field_map['salesforce_field']];
          }
          entity_save($sf_mapping->drupal_entity_type, $entity);
          watchdog('Salesforce Pull', 'Created entity associated with Salesforce Object ID: ' . $sf_object['Id']);
          list($entity_id) = entity_extract_ids($sf_mapping->drupal_entity_type, $entity);
          $mapping_object = entity_create('salesforce_mapping_object', array(
            'salesforce_id' => $sf_object['Id'],
            'entity_type' => $sf_mapping->drupal_entity_type,
            'entity_id' => $entity_id,
          ));
          $mapping_object->save();
        }
      }
    }

  }
  if($item) {
    $queue->releaseItem($item);
  }

}

function salesforce_pull_page() {
  return '';
}
