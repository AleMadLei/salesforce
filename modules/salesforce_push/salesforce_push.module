<?php

/**
 * Implements hook_entity_insert().
 */
function salesforce_push_entity_insert($entity, $type) {

}

/**
 * Implements hook_entity_insert().
 */
function salesforce_push_entity_update($entity, $type) {
  salesforce_push_entity($entity, SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE);
}

/**
 * Implements hook_entity_delete().
 */
function salesforce_push_entity_delete($entity, $type) {

}


function salesforce_push_entity($entity, $sf_sync_trigger) {
  $entity_type = $entity->entityType();
  $mappings = salesforce_mapping_load_multiple(array(
    'drupal_entity_type' => $entity_type,
    'drupal_bundle' => $entity->bundle()
  ));

  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  foreach ($mappings as $mapping) {
    if ($mapping->sync_triggers & $sf_sync_trigger) {
      $mapped_objects = salesforce_mapping_object_load_by_drupal($entity);

      // Generate parameter array from field mappings.
      $params = array();
      foreach ($mapping->field_mappings as $fieldmap) {
        $value = $wrapper->{$fieldmap['drupal_field']}->value();
        if (is_array($value)) {
          $value = $value[0];
        }
        $params[$fieldmap['salesforce_field']] = $value;
      }

      $sfapi = salesforce_get_api();

      // Entity is not linked to an SF object.
      if (!$mapped_objects) {
        // Setup SF record type
        $params['RecordTypeId'] = $mapping->salesforce_record_type;

        try {
          $response = $sfapi->objectCreate($mapping->salesforce_object_type, $params);
        }
        catch(SalesforceException $e) {
          drupal_set_message($e->getMessage(), 'error');
        }

        // Create mapping object, saved below.
        $mapped_objects = entity_create('salesforce_mapping_object', array(
          'entity_id' => $entity->internalIdentifier(),
          'entity_type' => $entity_type,
          'salesforce_id' => $response['id']
        ));
      }
      // Existing object link, update.
      else {
        // Update SF object.
        try {
          $sfapi->objectUpdate($mapping->salesforce_object_type, $mapped_objects->salesforce_id, $params);
        }
        catch(SalesforceException $e) {
          drupal_set_message($e->getMessage(), 'error');
        }
      }

      // Note that last_sync time is updated automatically.
      $mapped_objects->save();
    }
  }
}
