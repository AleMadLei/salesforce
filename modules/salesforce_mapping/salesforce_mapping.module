<?php

/**
 * @file
 * Manages Salesforce object and Drupal entity mappings.
 */

module_load_include('inc', 'salesforce_mapping', 'includes/salesforce_mapping.fieldmap_type');

/**
 * Bit flags defining when a data sync should take place for a given mapping.
 */
define('SALESFORCE_MAPPING_SYNC_OFF', 0x0000);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE', 0x0001);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE', 0x0002);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE', 0x0004);
define('SALESFORCE_MAPPING_SYNC_SF_CREATE', 0x0008);
define('SALESFORCE_MAPPING_SYNC_SF_UPDATE', 0x0010);
define('SALESFORCE_MAPPING_SYNC_SF_DELETE', 0x0020);

/**
 * Field mapping direction constants.
 */
define('SALESFORCE_MAPPING_DIRECTION_DRUPAL_SF', 'drupal_sf');
define('SALESFORCE_MAPPING_DIRECTION_SF_DRUPAL', 'sf_drupal');
define('SALESFORCE_MAPPING_DIRECTION_SYNC', 'sync');

/**
 * Field mapping Master or no record type (default) constant.
 */
define('SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE', 'default');

/**
 * Delimiter used in Salesforce multipicklists.
 */
define('SALESFORCE_MAPPING_ARRAY_DELIMITER', ';');

/**
 * Field mapping maximum name length.
 */
define('SALESFORCE_MAPPING_NAME_LENGTH', 128);

/**
 * Mapping object sync statuses.
 */
define('SALESFORCE_MAPPING_STATUS_SUCCESS', 1);
define('SALESFORCE_MAPPING_STATUS_ERROR', 0);

/**
 * Access callback for managing Salesforce mappings.
 */
function salesforce_mappings_access() {
  if (user_access('administer salesforce mapping')) {
    $sfapi = salesforce_get_api();
    return $sfapi->isAuthorized();
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function salesforce_mapping_entity_info() {
  $return = array(
    'salesforce_mapping' => array(
      'label' => t('Salesforce Mapping'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'SalesforceMapping',
      'base table' => 'salesforce_mapping',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'salesforce_mapping',
      'entity keys' => array(
        'id' => 'salesforce_mapping_id',
        'name' => 'name',
        'label' => 'label',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'salesforce_mapping' => array(
          'label' => 'Salesforce Mapping',
        ),
      ),
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/salesforce/mappings',
        'file' => 'salesforce_mapping.admin.inc',
        'file path' => drupal_get_path('module', 'salesforce_mapping') . '/includes',
        'controller class' => 'SalesforceMappingUIController',
      ),
      'access callback' => 'salesforce_mappings_access',
    ),
    'salesforce_mapping_object' => array(
      'label' => t('Salesforce Object Mapping'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'SalesforceMappingObject',
      'metadata controller class' => 'SalesforceMappingObjectMetadataController',
      'base table' => 'salesforce_mapping_object',
      'revision table' => 'salesforce_mapping_object_revision',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'module' => 'salesforce_mapping',
      'entity keys' => array(
        'id' => 'salesforce_mapping_object_id',
        'label' => 'salesforce_mapping_object_id',
        'revision' => 'revision_id',
      ),
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/content/salesforce/mapped-objects',
        'file' => 'salesforce_mapping_object.admin.inc',
        'file path' => drupal_get_path('module', 'salesforce_mapping') . '/includes',
        'controller class' => 'EntityContentUIController',
      ),
      'access callback' => 'salesforce_mapping_object_access',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_property_info().
 */
function salesforce_mapping_entity_property_info() {
  $info = array();

  $entities = salesforce_mapping_get_mapped_entities();
  foreach ($entities as $type => $bundles) {
    $properties = &$info[$type]['properties'];
    $properties['salesforce_mapping_object'] = array(
      'label' => t("Salesforce mapping object"),
      'type' => 'salesforce_mapping_object',
      'description' => t("Salesforce mapping object"),
      'getter callback' => 'salesforce_mapping_object_entity_property_get',
    );
  }

  return $info;
}

/**
 * Implements hook_menu().
 */
function salesforce_mapping_menu() {
  $items = array();

  $items['admin/content/salesforce'] = array(
    'title' => t('Salesforce'),
    'description' => t('Manage mapped Salesforce objects.'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'salesforce_mapping_object_overview_page',
    'file' => 'includes/salesforce_mapping_object.admin.inc',
    'access arguments' => array('view salesforce mapping')
  );
  $items['admin/content/salesforce/mapped-objects'] = array(
    'title' => t('Mapped objects'),
    'description' => t('Manage mapped Salesforce objects.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/content/salesforce/activity'] = array(
    'title' => t('Activity'),
    'description' => t('Activity on mapped Salesforce objects.'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function salesforce_mapping_menu_alter(&$items) {
  $items['admin/content/salesforce/mapped-objects/add']['title'] = t('Add mapped object');
}

/**
 * Loads a single salesforce_mapping or all of them if no name provided.
 *
 * @param null $name
 *   Name of the map to load.
 *
 * @return array
 *   The requested mapping or all of them if no one specific was requested.
 */
function salesforce_mapping_load($name = NULL) {
  $types = entity_load_multiple_by_name('salesforce_mapping', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Loads multiple salesforce_mappings based on a set of matching conditions.
 *
 * @param array $properties
 *   An array of properties on the {salesforce_mapping} table in the form
 *     'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal contact loading cache.
 *
 * @return array
 *   An array of salesforce_mapping objects.
 */
function salesforce_mapping_load_multiple($properties = array(), $reset = FALSE) {
  $mappings = array();
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'salesforce_mapping');
  $record_type = NULL;
  foreach ($properties as $key => $value) {
    if ($key == 'salesforce_record_type') {
      $record_type = $value;
    }
    else {
      $efq->propertyCondition($key, $value);
    }
  }
  $efq->propertyOrderBy('weight');

  $results = $efq->execute();
  if (!empty($results)) {
    $salesforce_mapping_ids = array_keys($results['salesforce_mapping']);

    if (!empty($salesforce_mapping_ids)) {
      $mappings = entity_load('salesforce_mapping', $salesforce_mapping_ids, array(), $reset);
    }
    if ($record_type) {
      foreach($mappings as $id => $mapping) {
        if (!$mapping->salesforce_record_types_allowed[$record_type]) {
          unset($mappings[$id]);
        }
      }
    }
  }

  return $mappings;
}

/**
 * Implements hook_theme().
 */
function salesforce_mapping_theme($existing, $type, $theme, $path) {
  return array(
    'salesforce_fieldmap_form_table' => array(
      'render element' => 'elements',
      'file' => 'includes/salesforce_mapping.admin.inc',
    ),
    'salesforce_mapping_linked_object' => array(
      'variables' => array(
        'label_hidden' => FALSE,
        'title_attributes' => NULL,
        'label' => '',
        'content_attributes' => NULL,
        'items' => array(),
        'item_attributes' => array(0 => ''),
        'classes' => '',
        'attributes' => '',
      ),
    ),
    'salesforce_mapping_overview_tabledrag_form' => array(
      'render element' => 'form',
      'file' => 'includes/salesforce_mapping.ui_controller.inc',
    ),
  );
}

/**
 * Returns Salesforce object mappings for a given Drupal entity.
 *
 * @param string $entity_type
 *   Type of entity to load.
 * @param int $entity_id
 *   Unique identifier of the target entity to load.
 * @param bool $reset
 *   Whether or not the cache should be cleared and fetch from current data.
 *
 * @return array
 *   The requested entity or FALSE if none was found.
 */
function salesforce_mapping_object_load_by_drupal($entity_type, $entity_id, $reset = FALSE) {
  $conditions = array(
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
  );
  $results = entity_load('salesforce_mapping_object', FALSE, $conditions, $reset);
  return !empty($results) ? reset($results) : FALSE;
}

/**
 * Return Salesforce object mappings for a given Salesforce object.
 *
 * @param string $salesforce_id
 *   Unique Id provided by Salesforce for the Salesforce record.
 * @param bool $reset
 *   Whether to reset the cache and retreive a new record.
 *
 * @return array
 *   Entities that match the given $salesforce_id.
 */
function salesforce_mapping_object_load_by_sfid($salesforce_id, $reset = FALSE) {
  $conditions = array(
    'salesforce_id' => $salesforce_id,
  );
  $results = entity_load('salesforce_mapping_object', FALSE, $conditions, $reset);
  return !empty($results) ? reset($results) : FALSE;
}

/**
 * Return a unique list of mapped Salesforce object types.
 *
 * @TODO: add parameter to limit by trigger: http://drupal.org/node/1915668
 */
function salesforce_mapping_get_mapped_objects() {
  $object_types = array();
  $mappings = salesforce_mapping_load();
  usort($mappings, 'salesforce_mapping_sort');
  foreach ($mappings as $mapping) {
    $object_types[$mapping->salesforce_object_type] = $mapping->salesforce_object_type;
  }
  return $object_types;
}

/**
 * Return a unique list of mapped Drupal entity types and bundles.
 */
function salesforce_mapping_get_mapped_entities() {
  $entity_types = array();
  $mappings = salesforce_mapping_load();
  usort($mappings, 'salesforce_mapping_sort');
  foreach ($mappings as $mapping) {
    $entity_types[$mapping->drupal_entity_type][$mapping->drupal_bundle] = TRUE;
  }
  return $entity_types;
}

/**
 * Sort mappings by weight.
 */
function salesforce_mapping_sort($mapping_a, $mapping_b) {
  if ($mapping_a->weight == $mapping_b->weight) {
    return 0;
  }
  return ($mapping_a->weight < $mapping_b->weight) ? -1 : 1;
}


/**
 * Implements hook_entity_delete().
 */
function salesforce_mapping_entity_delete($entity, $type) {
  // Delete any Salesforce object mappings with this entity.
  list($entity_id, , $bundle) = entity_extract_ids($type, $entity);
  $mapping_object = salesforce_mapping_object_load_by_drupal($type, $entity_id);

  // No mapping object for this entity, return.
  if (!$mapping_object) {
    return;
  }

  // Only delete mapping if it won't be handled by the delete trigger in the
  // mapping. We're avoiding the issue of mapping deleting the (the what?).
  $mappings = salesforce_mapping_load_multiple(array(
    'drupal_entity_type' => $type,
    'drupal_bundle' => $bundle,
  ));

  foreach ($mappings as $mapping) {
    if (!($mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE)) {
      $mapping_object->delete();
      return;
    }
  }
}

/**
 * Implements hook_permission().
 */
function salesforce_mapping_permission() {
  return array(
    'administer salesforce mapping' => array(
      'title' => t('Administer Salesforce mapping'),
      'description' => t('Administer Salesforce field maps.'),
      'restrict access' => TRUE,
    ),
    'view salesforce mapping' => array(
      'title' => t('View Salesforce mapping object'),
      'description' => t('View Salesforce mapping data.'),
    ),
    'create salesforce mapping object' => array(
      'title' => t('Create Salesforce mapping object'),
      'description' => t('Allows a user to create Salesforce mapping object entities.'),
      'restrict access' => TRUE,
    ),
    'edit salesforce mapping object' => array(
      'title' => t('Edit Salesforce mapping object'),
      'description' => t('Allows a user to edit Salesforce mapping object entities.'),
      'restrict access' => TRUE,
    ),
    'delete salesforce mapping object' => array(
      'title' => t('Delete Salesforce mapping object'),
      'description' => t('Allows a user to delete Salesforce mapping object entities.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Check access permission for Mapped Object Entity UI.
 */
function salesforce_mapping_object_access($op, $salesforce_mapping_object = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view salesforce mapping', $account);

    case 'create':
      return user_access('create salesforce mapping object', $account);

    case 'update':
      return user_access('edit salesforce mapping object', $account);

    case 'delete':
      return user_access('delete salesforce mapping object', $account);
  }

  return FALSE;
}

/**
 * Implements hook_entity_view().
 */
function salesforce_mapping_entity_view($entity, $type, $view_mode, $langcode) {
  // Render linked Salesforce data when viewing a mapped entity.
  $wrapper = entity_metadata_wrapper($type, $entity);
  if (!empty($wrapper->salesforce_mapping_object)) {
    $mapping = $wrapper->salesforce_mapping_object->value();
    if ($mapping && user_access('view salesforce mapping')) {
      $sfapi = salesforce_get_api();
      $entity->content['salesforce_id'] = array(
        '#theme' => 'salesforce_mapping_linked_object',
        '#label' => t('Salesforce ID'),
        '#items' => array(
          array(
            '#markup' => l(
              $mapping->salesforce_id,
              $sfapi->getInstanceUrl() . '/' . $mapping->salesforce_id,
              array(
                'attributes' => array('target' => '_blank'),
              )
            ),
          ),
        ),
        '#classes' => 'field field-label-inline clearfix',
      );
      $entity->content['salesforce_last_sync'] = array(
        '#theme' => 'salesforce_mapping_linked_object',
        '#label' => t('Salesforce last sync'),
        '#items' => array(array('#markup' => format_date($mapping->last_sync))),
        '#markup' => format_date($mapping->last_sync),
        '#classes' => 'field field-label-inline clearfix',
      );
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function salesforce_mapping_field_extra_fields() {
  // Include Salesforce data for mapped entities.
  $mappings = salesforce_mapping_load();
  foreach ($mappings as $mapping) {
    $extra[$mapping->drupal_entity_type][$mapping->drupal_bundle] = array(
      'display' => array(
        'salesforce_id' => array(
          'label' => t('Salesforce Id'),
          'description' => t('ID of a linked Salesforce object.'),
          'weight' => 0,
        ),
        'salesforce_last_sync' => array(
          'label' => t('Salesforce last sync'),
          'description' => t('Timestamp for the latest sync with Salesforce.'),
          'weight' => 0,
        ),
      ),
    );
  }

  return isset($extra) ? $extra : array();
}

/**
 * Wrapper around theme_field() to format linked Salesforce data.
 */
function theme_salesforce_mapping_linked_object($variables) {
  return theme_field($variables);
}

/**
 * Implements hook_entity_update().
 *
 * Ensures drupal entity has an update timestamp.
 */
function salesforce_mapping_entity_update($entity, $type) {
  // Check if mapping exists.
  $sf_mappings = salesforce_mapping_load_multiple(array('drupal_entity_type' => $type));
  if ($sf_mappings) {
    list($entity_id) = entity_extract_ids($type, $entity);
    $sf_mapping_object = salesforce_mapping_object_load_by_drupal($type, $entity_id);
    if ($sf_mapping_object) {
      // Update entity updated property.
      $sf_mapping_object->entity_updated = REQUEST_TIME;
      // No new revision needed for this change. If this generates a push, then
      // a revision will be generated for that action.
      $sf_mapping_object->is_new_revision = FALSE;
      $sf_mapping_object->save();
    }
  }
}

/**
 * Get the Salesforce fieldmap types array.
 *
 * @see hook_salesforce_mapping_fieldmap_type()
 * @see hook_salesforce_mapping_fieldmap_type_alter()
 *
 * @param string $fieldmap_type
 *   The fieldmap type, e.g. property, for which the info shall be returned, or
 *   NULL to return an array with info about all types.
 */
function salesforce_mapping_get_fieldmap_types($fieldmap_type = NULL) {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['salesforce_mapping_fieldmap_type'] = & drupal_static(__FUNCTION__);
  }
  $salesforce_mapping_fieldmap_type = & $drupal_static_fast['salesforce_mapping_fieldmap_type'];

  if (empty($salesforce_mapping_fieldmap_type)) {
    if ($cache = cache_get('salesforce_mapping_fieldmap_type')) {
      $salesforce_mapping_fieldmap_type = $cache->data;
    }
    else {
      $salesforce_mapping_fieldmap_type = module_invoke_all('salesforce_mapping_fieldmap_type');

      // Let other modules alter the fieldmap type.
      drupal_alter('salesforce_mapping_fieldmap_type', $salesforce_mapping_fieldmap_type);
      cache_set('salesforce_mapping_fieldmap_type', $salesforce_mapping_fieldmap_type);
    }
  }

  if (empty($fieldmap_type)) {
    return $salesforce_mapping_fieldmap_type;
  }
  elseif (isset($salesforce_mapping_fieldmap_type[$fieldmap_type])) {
    return $salesforce_mapping_fieldmap_type[$fieldmap_type];
  }
}

/**
 * Callback to get $salesforce_mapping_object->entity.
 */
function salesforce_mapping_object_property_entity_get(SalesforceMappingObject $salesforce_mapping_object, array $options, $property_name, $entity_type) {
  $entity = entity_load_single($salesforce_mapping_object->entity_type, $salesforce_mapping_object->entity_id);
  return entity_metadata_wrapper($salesforce_mapping_object->entity_type, $entity);
}

/**
 * Callback to set $salesforce_mapping_object->entity.
 */
function salesforce_mapping_object_property_entity_set(SalesforceMappingObject $salesforce_mapping_object, $name, $value, $lang, $type, $info) {
  $salesforce_mapping_object->entity_type = $value->type();
  $salesforce_mapping_object->entity_id = $value->getIdentifier();
}

/**
 * Callback to get the salesforce mapping object for an entity.
 */
function salesforce_mapping_object_entity_property_get($entity, array $options, $property_name, $entity_type) {
  $mapping_object = salesforce_mapping_object_load_by_drupal($entity_type, entity_id($entity_type, $entity));
  if ($mapping_object) {
    return entity_metadata_wrapper('salesforce_mapping_object', $mapping_object);
  }

  return FALSE;
}

/**
 * Return loaded mapping objects from a query.
 * @param array $header
 *  Table sort header array.
 * @param array $properties
 *  Array of properties to include in the query.
 * @param int $limit
 *  Number of results to return.
 * @param bool $revisions
 *  If all revisions should be returned.
 *
 * @return
 *  Array of loaded entities.
 */
function salesforce_mapping_object_filter_query($header = FALSE, $properties = array(), $limit = 25, $revisions = FALSE) {

  $entities = FALSE;
  $table = 'salesforce_mapping_object';
  $id = 'salesforce_mapping_object_id';

  if ($revisions) {
    $table .= '_revision';
    $id = 'revision_id';
  }
  $limit = (!empty($limit)) ? $limit : 25;
  $query = db_select($table, 'm')->extend('PagerDefault')->extend('TableSort')
    ->fields('m')
    ->limit($limit)
    ->orderByHeader($header);

  // conditions
  foreach ($properties as $property => $value) {
    if (isset($value) && ($value != '')) {
      $operator = is_array($value) ? 'IN' : '=';
      if ($property == 'salesforce_id') {
        if (strlen($value) < 18) {
          // Match start of the Salesforce ID if less than the full 18 chars.
          $operator = 'STARTS_WITH';
        }
      }
      $query->condition('m.' . $property, $value, $operator);
    }
  }

  $results = $query
    ->execute()
    ->fetchAllAssoc($id);

  if ($results) {
    $entities = array();
    if ($revisions) {
      foreach ($results as $key => $entity) {
        $entities[] = entity_revision_load('salesforce_mapping_object', $key);
      }
    }
    else {
      $entities = entity_load('salesforce_mapping_object', array_keys($results));
    }
  }

  return $entities;
}