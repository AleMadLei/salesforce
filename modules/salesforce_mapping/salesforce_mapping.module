<?php

/**
 * @file
 * Manages Salesforce object and Drupal entity mappings.
 */

/**
 * Bit flags defining when a data sync should take place for a given mapping.
 */
define('SALESFORCE_MAPPING_SYNC_OFF', 0x0000);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE', 0x0001);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE', 0x0002);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE', 0x0004);
define('SALESFORCE_MAPPING_SYNC_SF_CREATE', 0x0008);
define('SALESFORCE_MAPPING_SYNC_SF_UPDATE', 0x0010);
define('SALESFORCE_MAPPING_SYNC_SF_DELETE', 0x0020);

/**
 * Implements hook_menu().
 */
function salesforce_mapping_menu() {
  $items['admin/config/services/salesforce/mappings'] = array(
    'title' => 'Salesforce Mappings',
    'page callback' => 'salesforce_mappings_page',
    'access callback' => 'salesforce_mappings_access',
    'file' => 'includes/salesforce_mapping.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/salesforce/mappings/add'] = array(
    'title' => 'Add Salesforce mapping',
    'description' => 'Add a new Salesforce mapping.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_mapping_form'),
    'access callback' => 'salesforce_mappings_access',
    'file' => 'includes/salesforce_mapping.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['salesforce_mapping/%salesforce_mapping/edit'] = array(
    'title' => 'Edit mapping',
    'description' => 'Edit an existing Salesforce mapping.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_mapping_form', 1),
    'access callback' => 'salesforce_mappings_access',
    'file' => 'includes/salesforce_mapping.admin.inc',
  );

  return $items;
}

/**
 * Access callback for managing salesforce mappings.
 *
 * @return bool
 */
function salesforce_mappings_access() {
  if (user_access('administer salesforce')) {
    $sfapi = salesforce_get_api();
    return $sfapi->isAuthorized();
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function salesforce_mapping_entity_info() {
  $return = array(
    'salesforce_mapping' => array(
      'label' => t('Salesforce Mapping'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'SalesforceMapping',
      'base table' => 'salesforce_mapping',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'salesforce_mapping',
      'entity keys' => array(
        'id' => 'salesforce_mapping_id',
        'name' => 'name',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'salesforce_mapping' => array(
          'label' => 'Salesforce Mapping',
        ),
      ),
    ),

    'salesforce_mapping_object' => array(
      'label' => t('Salesforce Object Mapping'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'SalesforceMappingObject',
      'base table' => 'salesforce_mapping_object',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'module' => 'salesforce_mapping',
      'entity keys' => array(
        'id' => 'salesforce_mapping_object_id',
      ),
    )
  );

  return $return;
}

/**
 * Loads a single salesforce_mapping or all of them if no name provided.
 *
 * @param null $name
 *
 * @return array
 */
function salesforce_mapping_load($name = NULL) {
  $types = entity_load_multiple_by_name('salesforce_mapping', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Loads multiple salesforce_mappings based on a set of matching conditions.
 *
 * @param $properties
 *   An array of properties on the {salesforce_mapping} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal contact loading cache.
 *
 * @return
 *   An array of salesforce_mapping objects.
 */
function salesforce_mapping_load_multiple($properties = array(), $reset = FALSE) {
  $mappings = array();
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'salesforce_mapping');
  foreach ($properties as $key => $value) {
    $efq->propertyCondition($key, $value);
  }

  $results = $efq->execute();
  if (!empty($results)) {
    $salesforce_mapping_ids = array_keys($results['salesforce_mapping']);

    if (!empty($salesforce_mapping_ids)) {
      $mappings = entity_load('salesforce_mapping', $salesforce_mapping_ids, array(), $reset);
    }
  }

  return $mappings;
}

/**
* Implements hook_theme().
*/
function salesforce_mapping_theme($existing, $type, $theme, $path) {
  return array(
    'salesforce_fieldmap_form_table' => array(
      'render element' => 'elements',
      'file' => 'includes/salesforce_mapping.admin.inc',
    ),
  );
}

/**
 * Returns Salesforce object mappings for a given Drupal entity.
 *
 * @param $entity
 * @param bool $reset
 *
 * @return array
 */
function salesforce_mapping_object_load_by_drupal($entity, $reset = FALSE) {
  $conditions = array(
    'entity_id' => $entity->internalIdentifier(),
    'entity_type' => $entity->entityType()
  );
  $results = entity_load('salesforce_mapping_object', FALSE, $conditions, $reset);
  return !empty($results) ? reset($results) : FALSE;
}

/**
 * Return Salesforce object mappings for a given Salesforce object.
 *
 * @param $salesforce_id
 * @param bool $reset
 *
 * @return array
 */
function salesforce_mapping_object_load_by_sfid($salesforce_id, $reset = FALSE) {
  $conditions = array(
    'salesforce_id' => $salesforce_id,
  );
  $results = entity_load('salesforce_mapping_object', FALSE, $conditions, $reset);
  return !empty($results) ? reset($results) : FALSE;
}

/*
 *
 */
function salesforce_mapping_get_mapped_objects() {
  $object_types = array();
  $mappings = salesforce_mapping_load();
  foreach ($mappings as $mapping) {
    $object_types[$mapping->salesforce_object_type] = $mapping->salesforce_object_type;
  }
  return $object_types;
}
