<?php

/**
 * @file
 * Manages Salesforce object and Drupal entity mappings.
 */

/**
 * Bit flags defining when a data sync should take place for a given mapping.
 */
define('SALESFORCE_MAPPING_SYNC_OFF', 0x0000);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE', 0x0001);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE', 0x0002);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE', 0x0004);
define('SALESFORCE_MAPPING_SYNC_SF_CREATE', 0x0008);
define('SALESFORCE_MAPPING_SYNC_SF_UPDATE', 0x0010);
define('SALESFORCE_MAPPING_SYNC_SF_DELETE', 0x0020);

/**
 * Field mapping direction constants.
 */
define('SALESFORCE_MAPPING_DIRECTION_DRUPAL_SF', 'drupal_sf');
define('SALESFORCE_MAPPING_DIRECTION_SF_DRUPAL', 'sf_drupal');
define('SALESFORCE_MAPPING_DIRECTION_SYNC', 'sync');

/**
 * Implements hook_menu().
 */
//function salesforce_mapping_menu() {
//  $items['admin/config/services/salesforce/mappings'] = array(
//    'title' => 'Salesforce Mappings',
//    'page callback' => 'salesforce_mappings_page',
//    'access callback' => 'salesforce_mappings_access',
//    'file' => 'includes/salesforce_mapping.pages.inc',
//    'type' => MENU_LOCAL_TASK,
//  );
//  $items['admin/config/services/salesforce/mappings/add'] = array(
//    'title' => 'Add Salesforce mapping',
//    'description' => 'Add a new Salesforce mapping.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('salesforce_mapping_form'),
//    'access callback' => 'salesforce_mappings_access',
//    'file' => 'includes/salesforce_mapping.admin.inc',
//    'type' => MENU_LOCAL_ACTION,
//  );
//
//  $items['salesforce_mapping/%salesforce_mapping/edit'] = array(
//    'title' => 'Edit mapping',
//    'description' => 'Edit an existing Salesforce mapping.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('salesforce_mapping_form', 1),
//    'access callback' => 'salesforce_mappings_access',
//    'file' => 'includes/salesforce_mapping.admin.inc',
//  );
//  $items['salesforce_mapping/%salesforce_mapping/delete'] = array(
//    'title' => 'Delete mapping',
//    'description' => 'Delete an existing Salesforce mapping.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('salesforce_mapping_delete_form', 1),
//    'access callback' => 'salesforce_mappings_access',
//    'file' => 'includes/salesforce_mapping.admin.inc',
//  );
//
//
//  return $items;
//}

/**
 * Access callback for managing salesforce mappings.
 *
 * @return bool
 */
function salesforce_mappings_access() {
  if (user_access('administer salesforce')) {
    $sfapi = salesforce_get_api();
    return $sfapi->isAuthorized();
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function salesforce_mapping_entity_info() {
  $return = array(
    'salesforce_mapping' => array(
      'label' => t('Salesforce Mapping'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'SalesforceMapping',
      'base table' => 'salesforce_mapping',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'salesforce_mapping',
      'entity keys' => array(
        'id' => 'salesforce_mapping_id',
        'name' => 'name',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'salesforce_mapping' => array(
          'label' => 'Salesforce Mapping',
        ),
      ),
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/salesforce/mappings',
        'file' => 'salesforce_mapping.admin.inc',
        'file path' => drupal_get_path('module', 'salesforce_mapping') . '/includes',
        'controller class' => 'SalesforceMappingUIController',
      ),
      'access callback' => 'salesforce_mappings_access'
    ),

    'salesforce_mapping_object' => array(
      'label' => t('Salesforce Object Mapping'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'SalesforceMappingObject',
      'base table' => 'salesforce_mapping_object',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'module' => 'salesforce_mapping',
      'entity keys' => array(
        'id' => 'salesforce_mapping_object_id',
      ),
    )
  );

  return $return;
}

/**
 * Loads a single salesforce_mapping or all of them if no name provided.
 *
 * @param null $name
 *
 * @return array
 */
function salesforce_mapping_load($name = NULL) {
  $types = entity_load_multiple_by_name('salesforce_mapping', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Loads multiple salesforce_mappings based on a set of matching conditions.
 *
 * @param $properties
 *   An array of properties on the {salesforce_mapping} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal contact loading cache.
 *
 * @return
 *   An array of salesforce_mapping objects.
 */
function salesforce_mapping_load_multiple($properties = array(), $reset = FALSE) {
  $mappings = array();
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'salesforce_mapping');
  foreach ($properties as $key => $value) {
    $efq->propertyCondition($key, $value);
  }

  $results = $efq->execute();
  if (!empty($results)) {
    $salesforce_mapping_ids = array_keys($results['salesforce_mapping']);

    if (!empty($salesforce_mapping_ids)) {
      $mappings = entity_load('salesforce_mapping', $salesforce_mapping_ids, array(), $reset);
    }
  }

  return $mappings;
}

/**
* Implements hook_theme().
*/
function salesforce_mapping_theme($existing, $type, $theme, $path) {
  return array(
    'salesforce_fieldmap_form_table' => array(
      'render element' => 'elements',
      'file' => 'includes/salesforce_mapping.admin.inc',
    ),
    'salesforce_mapping_linked_object' => array(
      'variables' => array(
        'label_hidden' => FALSE,
        'title_attributes' => NULL,
        'label' => '',
        'content_attributes' => NULL,
        'items' => array(),
        'item_attributes' => array(0 => ''),
        'classes' => '',
        'attributes' => '',
      )
    )
  );
}

/**
 * Returns Salesforce object mappings for a given Drupal entity.
 *
 * @param $entity_type
 * @param $entity_id
 * @param bool $reset
 *
 * @return array
 */
function salesforce_mapping_object_load_by_drupal($entity_type, $entity_id, $reset = FALSE) {
  $conditions = array(
    'entity_id' => $entity_id,
    'entity_type' => $entity_type
  );
  $results = entity_load('salesforce_mapping_object', FALSE, $conditions, $reset);
  return !empty($results) ? reset($results) : FALSE;
}

/**
 * Return Salesforce object mappings for a given Salesforce object.
 *
 * @param $salesforce_id
 * @param bool $reset
 *
 * @return array
 */
function salesforce_mapping_object_load_by_sfid($salesforce_id, $reset = FALSE) {
  $conditions = array(
    'salesforce_id' => $salesforce_id,
  );
  $results = entity_load('salesforce_mapping_object', FALSE, $conditions, $reset);
  return !empty($results) ? reset($results) : FALSE;
}

/**
 * Return a unique list of mapped salesforce object types.
 */
function salesforce_mapping_get_mapped_objects() {
  $object_types = array();
  $mappings = salesforce_mapping_load();
  foreach ($mappings as $mapping) {
    $object_types[$mapping->salesforce_object_type] = $mapping->salesforce_object_type;
  }
  return $object_types;
}

/**
 * Implements hook_entity_delete().
 */
function salesforce_mapping_entity_delete($entity, $type) {
  // Delete any Salesforce object mappings with this entity
  list($entity_id) = entity_extract_ids($type, $entity);
  $mapping_object = salesforce_mapping_object_load_by_drupal($type, $entity_id);
  $entity_info = entity_get_info($type);
  $bundle = $entity_info['entity keys']['bundle'];
  $mapping = $bundle?entity_load('salesforce_mapping', FALSE, array(
    'drupal_entity_type' => $type,
    'drupal_bundle' => $entity->$bundle
    )
  ) : array();
  $mapping = array_shift(array_values($mapping));
  // If mapping is set, check for Drupal delete
  if ($mapping){
    $delete_trigger = $mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE;
    if (!$delete_trigger && $mapping_object) {
      $mapping_object->delete();
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function salesforce_mapping_entity_load($entities, $type) {
  // Load the linked Salesforce ID into an entity.
  foreach ($entities as $entity) {
    list($entity_id) = entity_extract_ids($type, $entity);
    $mapping = salesforce_mapping_object_load_by_drupal($type, $entity_id);
    if ($mapping) {
      $entity->salesforce_id = $mapping->salesforce_id;
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function salesforce_mapping_entity_view($entity, $type, $view_mode, $langcode) {
  // Render linked Salesforce data when viewing a mapped entity.
  list($entity_id) = entity_extract_ids($type, $entity);
  $mapping = salesforce_mapping_object_load_by_drupal($type, $entity_id);
  if ($mapping) {
    $sfapi = salesforce_get_api();
    $entity->content['salesforce_id'] = array(
      '#theme' => 'salesforce_mapping_linked_object',
      '#label' => t('Salesforce ID'),
      '#items' => array(array(
        '#markup' => l(
          $mapping->salesforce_id,
          $sfapi->getInstanceURL() . '/' . $mapping->salesforce_id,
          array(
            'attributes' => array('target' => '_blank')
          )
        )
      )),
      '#classes' => 'field field-label-inline clearfix',
    );
    $entity->content['salesforce_last_sync'] = array(
      '#theme' => 'salesforce_mapping_linked_object',
      '#label' => t('Salesforce last sync'),
      '#items' => array(array('#markup' => format_date($mapping->last_sync))),
      '#markup' => format_date($mapping->last_sync),
      '#classes' => 'field field-label-inline clearfix',
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function salesforce_mapping_field_extra_fields() {
  // Include Salesforce data for mapped entities.
  $mappings = salesforce_mapping_load();
  foreach ($mappings as $mapping) {
    $extra[$mapping->drupal_entity_type][$mapping->drupal_bundle] = array(
      'display' => array(
        'salesforce_id' => array(
          'label' => t('Salesforce Id'),
          'description' => t('ID of a linked Salesforce object.'),
          'weight' => 0,
        ),
        'salesforce_last_sync' => array(
          'label' => t('Salesforce last sync'),
          'description' => t('Timestamp for the latest sync with Salesforce.'),
          'weight' => 0,
        ),
      )
    );
  }

  return $extra;
}

/**
 * Wrapper around theme_field() to format linked Salesforce data.
 */
function theme_salesforce_mapping_linked_object($variables) {
  return theme_field($variables);
}

/*
 * Implements hook_entity_update()
 *
 * Ensures drupal entity has an update timestamp
 */
function salesforce_mapping_entity_update($entity, $type) {
  // Check if mapping exists
  $sf_mappings = salesforce_mapping_load_multiple(array('drupal_entity_type' => $type));
  if ($sf_mappings) {
    $sf_mapping_object = salesforce_mapping_object_load_by_drupal($type, $entity->internalIdentifier());
    if ($sf_mapping_object) {
      // Update sync via save
      $sf_mapping_object->save();
    }
  }
}

