<?php

/**
 * @file
 * Install/uninstall tasks for the Salesforce module.
 */

/**
 * Implements hook_uninstall().
 */
function salesforce_uninstall() {
  config_clear('salesforce.auth_settings', 'salesforce_consumer_key');
  config_clear('salesforce.auth_settings', 'salesforce_consumer_secret');
  config_clear('salesforce.auth_settings', 'salesforce_endpoint');
  config_clear('salesforce.auth_settings', 'salesforce_identity');
  config_clear('salesforce.auth_settings', 'salesforce_instance_url');
  config_clear('salesforce.auth_settings', 'salesforce_refresh_token');
}


/**
 * Implements hook_requirements().
 */
function salesforce_requirements($phase) {
  $auth_config = config('salesforce.auth_settings');
  $requirements = array();

  $t = get_t();

  if ($phase == 'runtime') {
    $requirements['salesforce'] = array(
      'title' => $t('Salesforce'),
    );
    // Check if SSL is enabled. Do not proceed if it is disabled.
    if ($_SERVER['HTTPS'] !== 'on') {
      $requirements['salesforce']['value'] = $t('SSL is not enabled for this site. You must enable SSL to authorize your site with Salesforce.');
      $requirements['salesforce']['severity'] = REQUIREMENT_ERROR;
      return $requirements;
    }
    // Check if the site is authorized with Salesforce.
    $sfapi = new Salesforce($auth_config->get('salesforce_consumer_key'), $auth_config->get('salesforce_consumer_key'));
    if ($sfapi->isAuthorized()) {
      try {
        $resources = $sfapi->listResources();
        if (is_array($resources) && !empty($resources)) {
          $requirements['salesforce']['value'] = $t('Your website is authorized and connected to Salesforce. !resources.', array('!resources' => l($t('View available resources'), 'admin/config/services/salesforce')));
          $requirements['salesforce']['severity'] = REQUIREMENT_OK;
        }
      }
      catch (Exception $e) {
        $requirements['salesforce']['value'] = $e->getMessage();
        $requirements['salesforce']['severity'] = REQUIREMENT_ERROR;
      }
    }
    else {
      $requirements['salesforce']['value'] = $t('Your website is not authorized to connect with Salesforce. Please visit !config to authorize your site.', array('!config' => l($t('the Salesforce configuration page'), 'admin/config/services/salesforce')));
      $requirements['salesforce']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function salesforce_schema() {
  $schema = array();
  $schema['cache_salesforce_object'] = backdrop_get_schema_unprocessed('system', 'cache');
  $schema['cache_salesforce_object']['description'] = 'Cache table for detailed information about specific Salesforce objects.';
  return $schema;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.

/**
 * Migrate salesforce variables to config.
 */
function salesforce_update_1000() {
  $config = config('salesforce.settings');
  $config->set('salesforce_api_version', update_variable_get('salesforce_api_version', array(
    "label" => "Summer '14",
    "url" => "/services/data/v31.0",
    "version" => "31.0",
  )));
  $config->save();

  $auth_config = config('salesforce.auth_settings');
  $auth_config->set('salesforce_endpoint', update_variable_get('salesforce_endpoint', SALESFORCE_DEFAULT_ENDPOINT));
  $auth_config->set('salesforce_instance_url', update_variable_get('salesforce_instance_url', ''));
  $auth_config->set('salesforce_access_token', update_variable_get('salesforce_access_token', ''));
  $auth_config->set('salesforce_refresh_token', update_variable_get('salesforce_refresh_token', ''));
  $auth_config->set('salesforce_identity', update_variable_get('salesforce_identity', ''));
  $auth_config->set('salesforce_consumer_key', update_variable_get('salesforce_consumer_key', ''));
  $auth_config->set('salesforce_consumer_secret', update_variable_get('salesforce_consumer_secret', ''));
  $auth_config->save();

  update_variable_del('salesforce_endpoint');
  update_variable_del('salesforce_api_version');
  update_variable_del('salesforce_instance_url');
  update_variable_del('salesforce_access_token');
  update_variable_del('salesforce_refresh_token');
  update_variable_del('salesforce_identity');
  update_variable_del('salesforce_consumer_key');
  update_variable_del('salesforce_consumer_secret');
}

/**
 * Implements hook_update_last_removed().
 */
function salesforce_update_last_removed() {
  return 7301;
}
